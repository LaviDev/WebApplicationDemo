// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplicationDemo.DataContext;

#nullable disable

namespace WebApplicationDemo.Migrations
{
    [DbContext(typeof(DemoContext))]
    [Migration("20230213092643_Mymigration")]
    partial class Mymigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("citasmedicas")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplicationDemo.Modelo.Entities.Atiende", b =>
                {
                    b.Property<int>("MedicoIdFK")
                        .HasColumnType("int");

                    b.Property<int>("PacienteIdFK")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("MedicoIdFK", "PacienteIdFK");

                    b.HasIndex("PacienteIdFK");

                    b.ToTable("Atendidos", "citasmedicas");
                });

            modelBuilder.Entity("WebApplicationDemo.Modelo.Entities.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiagnosticoId")
                        .HasColumnType("int");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("fehcaHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("motivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticoId")
                        .IsUnique();

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("CITA", "citasmedicas");
                });

            modelBuilder.Entity("WebApplicationDemo.Modelo.Entities.Diagnostico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("enfermedad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("valoracionEspecialista")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DIAGNOSTICO", "citasmedicas");
                });

            modelBuilder.Entity("WebApplicationDemo.Modelo.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuario")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("USUARIO", "citasmedicas");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WebApplicationDemo.Modelo.Entities.Medico", b =>
                {
                    b.HasBaseType("WebApplicationDemo.Modelo.Entities.Usuario");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("numColegiado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("MEDICO", "citasmedicas");
                });

            modelBuilder.Entity("WebApplicationDemo.Modelo.Entities.Paciente", b =>
                {
                    b.HasBaseType("WebApplicationDemo.Modelo.Entities.Usuario");

                    b.Property<string>("NSS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numTarjeta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PACIENTE", "citasmedicas");
                });

            modelBuilder.Entity("WebApplicationDemo.Modelo.Entities.Atiende", b =>
                {
                    b.HasOne("WebApplicationDemo.Modelo.Entities.Medico", "Medico")
                        .WithMany("Atendidos")
                        .HasForeignKey("MedicoIdFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApplicationDemo.Modelo.Entities.Paciente", "Paciente")
                        .WithMany("Atendidos")
                        .HasForeignKey("PacienteIdFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("WebApplicationDemo.Modelo.Entities.Cita", b =>
                {
                    b.HasOne("WebApplicationDemo.Modelo.Entities.Diagnostico", "Diagnosticos")
                        .WithOne("cita")
                        .HasForeignKey("WebApplicationDemo.Modelo.Entities.Cita", "DiagnosticoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationDemo.Modelo.Entities.Medico", "Medicos")
                        .WithMany("Citas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationDemo.Modelo.Entities.Paciente", "Pacientes")
                        .WithMany("Citas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosticos");

                    b.Navigation("Medicos");

                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("WebApplicationDemo.Modelo.Entities.Medico", b =>
                {
                    b.HasOne("WebApplicationDemo.Modelo.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("WebApplicationDemo.Modelo.Entities.Medico", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationDemo.Modelo.Entities.Paciente", b =>
                {
                    b.HasOne("WebApplicationDemo.Modelo.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("WebApplicationDemo.Modelo.Entities.Paciente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationDemo.Modelo.Entities.Diagnostico", b =>
                {
                    b.Navigation("cita")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationDemo.Modelo.Entities.Medico", b =>
                {
                    b.Navigation("Atendidos");

                    b.Navigation("Citas");
                });

            modelBuilder.Entity("WebApplicationDemo.Modelo.Entities.Paciente", b =>
                {
                    b.Navigation("Atendidos");

                    b.Navigation("Citas");
                });
#pragma warning restore 612, 618
        }
    }
}
